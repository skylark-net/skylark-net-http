{"version":3,"sources":["skylark-net-http.js"],"names":["define","skylark","attach","types","objects","arrays","funcs","Deferred","Evented","http","each","mixin","noop","isArray","isFunction","isPlainObject","type","getAbsoluteUrl","url","a","document","createElement","href","Xhr","jsonpID","key","name","rscript","scriptTypeRE","xmlTypeRE","jsonType","htmlType","blankRE","XhrDefaultOptions","async","beforeSend","success","error","complete","context","global","accepts","script","json","xml","html","text","crossDomain","timeout","processData","cache","xhrFields","withCredentials","mimeToDataType","mime","split","test","appendQuery","query","replace","serializeData","options","data","param","traditional","toUpperCase","undefined","serialize","params","obj","scope","t","array","hash","value","add","this","push","encodeURIComponent","join","inherit","klassName","_request","args","_","self","xhr","XMLHttpRequest","call","dataType","handleAs","mimeType","headers","isFormData","FormData","basicAuthorizationToken","user","password","deferred","contentType","indexOf","overrideMimeType","finish","onloadend","onabort","onprogress","ontimeout","result","status","startsWith","getResponseHeader","responseText","eval","responseXML","JSON","parse","Blob","xhrObj","response","reponse","e","reject","resolve","Error","statusText","evt","notify","open","toLowerCase","hdr","setRequestHeader","send","promise","abort","request","get","post","patch","put","del","init","forEach","defaultOptions","main"],"mappings":"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","file":"../skylark-net-http.js","sourcesContent":["define('skylark-net-http/http',[\r\n  \"skylark-langx-ns/ns\",\r\n],function(skylark){\r\n\treturn skylark.attach(\"net.http\",{});\r\n});\ndefine('skylark-net-http/Xhr',[\r\n  \"skylark-langx-ns/ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-arrays\",\r\n  \"skylark-langx-funcs\",\r\n  \"skylark-langx-async/Deferred\",\r\n  \"skylark-langx-emitter/Evented\",\r\n  \"./http\"\r\n],function(skylark,types,objects,arrays,funcs,Deferred,Evented,http){\r\n\r\n    var each = objects.each,\r\n        mixin = objects.mixin,\r\n        noop = funcs.noop,\r\n        isArray = types.isArray,\r\n        isFunction = types.isFunction,\r\n        isPlainObject = types.isPlainObject,\r\n        type = types.type;\r\n \r\n     var getAbsoluteUrl = (function() {\r\n        var a;\r\n\r\n        return function(url) {\r\n            if (!a) a = document.createElement('a');\r\n            a.href = url;\r\n\r\n            return a.href;\r\n        };\r\n    })();\r\n   \r\n    var Xhr = (function(){\r\n        var jsonpID = 0,\r\n            key,\r\n            name,\r\n            rscript = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n            scriptTypeRE = /^(?:text|application)\\/javascript/i,\r\n            xmlTypeRE = /^(?:text|application)\\/xml/i,\r\n            jsonType = 'application/json',\r\n            htmlType = 'text/html',\r\n            blankRE = /^\\s*$/;\r\n\r\n        var XhrDefaultOptions = {\r\n            async: true,\r\n\r\n            // Default type of request\r\n            type: 'GET',\r\n            // Callback that is executed before request\r\n            beforeSend: noop,\r\n            // Callback that is executed if the request succeeds\r\n            success: noop,\r\n            // Callback that is executed the the server drops error\r\n            error: noop,\r\n            // Callback that is executed on request complete (both: error and success)\r\n            complete: noop,\r\n            // The context for the callbacks\r\n            context: null,\r\n            // Whether to trigger \"global\" Ajax events\r\n            global: true,\r\n\r\n            // MIME types mapping\r\n            // IIS returns Javascript as \"application/x-javascript\"\r\n            accepts: {\r\n                script: 'text/javascript, application/javascript, application/x-javascript',\r\n                json: 'application/json',\r\n                xml: 'application/xml, text/xml',\r\n                html: 'text/html',\r\n                text: 'text/plain'\r\n            },\r\n            // Whether the request is to another domain\r\n            crossDomain: false,\r\n            // Default timeout\r\n            timeout: 0,\r\n            // Whether data should be serialized to string\r\n            processData: true,\r\n            // Whether the browser should be allowed to cache GET responses\r\n            cache: true,\r\n\r\n            xhrFields : {\r\n                withCredentials : true\r\n            }\r\n        };\r\n\r\n        function mimeToDataType(mime) {\r\n            if (mime) {\r\n                mime = mime.split(';', 2)[0];\r\n            }\r\n            if (mime) {\r\n                if (mime == htmlType) {\r\n                    return \"html\";\r\n                } else if (mime == jsonType) {\r\n                    return \"json\";\r\n                } else if (scriptTypeRE.test(mime)) {\r\n                    return \"script\";\r\n                } else if (xmlTypeRE.test(mime)) {\r\n                    return \"xml\";\r\n                }\r\n            }\r\n            return \"text\";\r\n        }\r\n\r\n        function appendQuery(url, query) {\r\n            if (query == '') return url\r\n            return (url + '&' + query).replace(/[&?]{1,2}/, '?')\r\n        }\r\n\r\n        // serialize payload and append it to the URL for GET requests\r\n        function serializeData(options) {\r\n            options.data = options.data || options.query;\r\n            if (options.processData && options.data && type(options.data) != \"string\") {\r\n                options.data = param(options.data, options.traditional);\r\n            }\r\n            if (options.data && (!options.type || options.type.toUpperCase() == 'GET')) {\r\n                options.url = appendQuery(options.url, options.data);\r\n                options.data = undefined;\r\n            }\r\n        }\r\n\r\n        function serialize(params, obj, traditional, scope) {\r\n            var t, array = isArray(obj),\r\n                hash = isPlainObject(obj)\r\n            each(obj, function(key, value) {\r\n                t =type(value);\r\n                if (scope) key = traditional ? scope :\r\n                    scope + '[' + (hash || t == 'object' || t == 'array' ? key : '') + ']'\r\n                // handle data in serializeArray() format\r\n                if (!scope && array) params.add(value.name, value.value)\r\n                // recurse into nested objects\r\n                else if (t == \"array\" || (!traditional && t == \"object\"))\r\n                    serialize(params, value, traditional, key)\r\n                else params.add(key, value)\r\n            })\r\n        }\r\n\r\n        var param = function(obj, traditional) {\r\n            var params = []\r\n            params.add = function(key, value) {\r\n                if (isFunction(value)) {\r\n                  value = value();\r\n                }\r\n                if (value == null) {\r\n                  value = \"\";\r\n                }\r\n                this.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n            };\r\n            serialize(params, obj, traditional)\r\n            return params.join('&').replace(/%20/g, '+')\r\n        };\r\n\r\n        var Xhr = Evented.inherit({\r\n            klassName : \"Xhr\",\r\n\r\n            _request  : function(args) {\r\n                var _ = this._,\r\n                    self = this,\r\n                    options = mixin({},XhrDefaultOptions,_.options,args),\r\n                    xhr = _.xhr = new XMLHttpRequest();\r\n\r\n                serializeData(options)\r\n\r\n                if (options.beforeSend) {\r\n                    options.beforeSend.call(this, xhr, options);\r\n                }                \r\n\r\n                var dataType = options.dataType || options.handleAs,\r\n                    mime = options.mimeType || options.accepts[dataType],\r\n                    headers = options.headers,\r\n                    xhrFields = options.xhrFields,\r\n                    isFormData = options.data && options.data instanceof FormData,\r\n                    basicAuthorizationToken = options.basicAuthorizationToken,\r\n                    type = options.type,\r\n                    url = options.url,\r\n                    async = options.async,\r\n                    user = options.user , \r\n                    password = options.password,\r\n                    deferred = new Deferred(),\r\n                    contentType = isFormData ? false : 'application/x-www-form-urlencoded';\r\n\r\n                if (xhrFields) {\r\n                    for (name in xhrFields) {\r\n                        xhr[name] = xhrFields[name];\r\n                    }\r\n                }\r\n\r\n                if (mime && mime.indexOf(',') > -1) {\r\n                    mime = mime.split(',', 2)[0];\r\n                }\r\n                if (mime && xhr.overrideMimeType) {\r\n                    xhr.overrideMimeType(mime);\r\n                }\r\n\r\n                //if (dataType) {\r\n                //    xhr.responseType = dataType;\r\n                //}\r\n\r\n                var finish = function() {\r\n                    xhr.onloadend = noop;\r\n                    xhr.onabort = noop;\r\n                    xhr.onprogress = noop;\r\n                    xhr.ontimeout = noop;\r\n                    xhr = null;\r\n                }\r\n                var onloadend = function() {\r\n                    var result, error = false\r\n                    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && getAbsoluteUrl(url).startsWith('file:'))) {\r\n                        dataType = dataType || mimeToDataType(options.mimeType || xhr.getResponseHeader('content-type'));\r\n\r\n                        result = xhr.responseText;\r\n                        try {\r\n                            if (dataType == 'script') {\r\n                                eval(result);\r\n                            } else if (dataType == 'xml') {\r\n                                result = xhr.responseXML;\r\n                            } else if (dataType == 'json') {\r\n                                result = blankRE.test(result) ? null : JSON.parse(result);\r\n                            } else if (dataType == \"blob\") {\r\n                                result = Blob([xhrObj.response]);\r\n                            } else if (dataType == \"arraybuffer\") {\r\n                                result = xhr.reponse;\r\n                            }\r\n                        } catch (e) { \r\n                            error = e;\r\n                        }\r\n\r\n                        if (error) {\r\n                            deferred.reject(error,xhr.status,xhr);\r\n                        } else {\r\n                            deferred.resolve(result,xhr.status,xhr);\r\n                        }\r\n                    } else {\r\n                        deferred.reject(new Error(xhr.statusText),xhr.status,xhr);\r\n                    }\r\n                    finish();\r\n                };\r\n\r\n                var onabort = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"abort\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n \r\n                var ontimeout = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"timeout\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n\r\n                var onprogress = function(evt) {\r\n                    if (deferred) {\r\n                        deferred.notify(evt,xhr.status,xhr);\r\n                    }\r\n                }\r\n\r\n                xhr.onloadend = onloadend;\r\n                xhr.onabort = onabort;\r\n                xhr.ontimeout = ontimeout;\r\n                xhr.onprogress = onprogress;\r\n\r\n                xhr.open(type, url, async, user, password);\r\n               \r\n                if (headers) {\r\n                    for ( var key in headers) {\r\n                        var value = headers[key];\r\n \r\n                        if(key.toLowerCase() === 'content-type'){\r\n                            contentType = headers[hdr];\r\n                        } else {\r\n                           xhr.setRequestHeader(key, value);\r\n                        }\r\n                    }\r\n                }   \r\n\r\n                if  (contentType && contentType !== false){\r\n                    xhr.setRequestHeader('Content-Type', contentType);\r\n                }\r\n\r\n                if(!headers || !('X-Requested-With' in headers)){\r\n                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n                }\r\n\r\n\r\n                //If basicAuthorizationToken is defined set its value into \"Authorization\" header\r\n                if (basicAuthorizationToken) {\r\n                    xhr.setRequestHeader(\"Authorization\", basicAuthorizationToken);\r\n                }\r\n\r\n                xhr.send(options.data ? options.data : null);\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            \"abort\": function() {\r\n                var _ = this._,\r\n                    xhr = _.xhr;\r\n\r\n                if (xhr) {\r\n                    xhr.abort();\r\n                }    \r\n            },\r\n\r\n\r\n            \"request\": function(args) {\r\n                return this._request(args);\r\n            },\r\n\r\n            get : function(args) {\r\n                args = args || {};\r\n                args.type = \"GET\";\r\n                return this._request(args);\r\n            },\r\n\r\n            post : function(args) {\r\n                args = args || {};\r\n                args.type = \"POST\";\r\n                return this._request(args);\r\n            },\r\n\r\n            patch : function(args) {\r\n                args = args || {};\r\n                args.type = \"PATCH\";\r\n                return this._request(args);\r\n            },\r\n\r\n            put : function(args) {\r\n                args = args || {};\r\n                args.type = \"PUT\";\r\n                return this._request(args);\r\n            },\r\n\r\n            del : function(args) {\r\n                args = args || {};\r\n                args.type = \"DELETE\";\r\n                return this._request(args);\r\n            },\r\n\r\n            \"init\": function(options) {\r\n                this._ = {\r\n                    options : options || {}\r\n                };\r\n            }\r\n        });\r\n\r\n        [\"request\",\"get\",\"post\",\"put\",\"del\",\"patch\"].forEach(function(name){\r\n            Xhr[name] = function(url,args) {\r\n                var xhr = new Xhr({\"url\" : url});\r\n                return xhr[name](args);\r\n            };\r\n        });\r\n\r\n        Xhr.defaultOptions = XhrDefaultOptions;\r\n        Xhr.param = param;\r\n\r\n        return Xhr;\r\n    })();\r\n\r\n\treturn http.Xhr = Xhr;\t\r\n});\ndefine('skylark-net-http/main',[\r\n\t\"./http\",\r\n\t\"./Xhr\"\r\n],function(http,Xhr){\r\n\treturn http;\r\n});\ndefine('skylark-net-http', ['skylark-net-http/main'], function (main) { return main; });\n\n"]}