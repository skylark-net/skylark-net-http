{"version":3,"sources":["skylark-net-http.js"],"names":["define","skylark","attach","types","objects","arrays","funcs","Deferred","Evented","http","each","mixin","noop","isArray","isFunction","isPlainObject","type","getAbsoluteUrl","url","a","document","createElement","href","Xhr","jsonpID","key","name","rscript","scriptTypeRE","xmlTypeRE","jsonType","htmlType","blankRE","XhrDefaultOptions","async","beforeSend","success","error","complete","context","global","accepts","script","json","xml","html","text","crossDomain","timeout","processData","cache","traditional","xhrFields","withCredentials","mimeToDataType","mime","split","test","appendQuery","query","replace","serializeData","options","data","param","toUpperCase","undefined","serialize","params","obj","scope","t","array","hash","value","add","this","push","encodeURIComponent","join","inherit","klassName","_request","args","_","self","xhr","XMLHttpRequest","call","dataType","handleAs","mimeType","headers","isFormData","FormData","basicAuthorizationToken","user","password","deferred","contentType","indexOf","overrideMimeType","finish","onloadend","onabort","onprogress","ontimeout","result","status","startsWith","getResponseHeader","responseText","eval","responseXML","JSON","parse","Blob","response","reponse","e","reject","resolve","Error","statusText","evt","notify","open","toLowerCase","setRequestHeader","send","promise","abort","request","get","post","patch","put","del","init","forEach","defaultOptions","strings","substitute","Restful","idAttribute","getBaseUrl","baseEndpoint","baseUrl","server","basePath","_head","_get","_post","verb","_put","_delete","_patch","retrieve","create","update","delete","blobSlice","prototype","slice","webkitSlice","mozSlice","Upload","_construct","_options","debug","maxConnections","maxChunkSize","onProgress","id","fileName","loaded","total","onComplete","onCancel","onFailure","_queue","_params","_files","_xhrs","_loaded","file","len","copy","clone","_send","sendAll","length","cancel","_cancel","_dequeue","cancelAll","i","getName","getSize","fileSize","size","getLoaded","curUploadingSize","chunkSize","curLoadedSize","formParamName","formData","append","progress","lengthComputable","then","catch","getQueue","inArray","splice","max","nextId","uploader","files","main"],"mappings":"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","file":"../skylark-net-http.js","sourcesContent":["define('skylark-net-http/http',[\r\n  \"skylark-langx-ns/ns\",\r\n],function(skylark){\r\n\treturn skylark.attach(\"net.http\",{});\r\n});\ndefine('skylark-net-http/Xhr',[\r\n  \"skylark-langx-ns/ns\",\r\n  \"skylark-langx-types\",\r\n  \"skylark-langx-objects\",\r\n  \"skylark-langx-arrays\",\r\n  \"skylark-langx-funcs\",\r\n  \"skylark-langx-async/Deferred\",\r\n  \"skylark-langx-emitter/Evented\",\r\n  \"./http\"\r\n],function(skylark,types,objects,arrays,funcs,Deferred,Evented,http){\r\n\r\n    var each = objects.each,\r\n        mixin = objects.mixin,\r\n        noop = funcs.noop,\r\n        isArray = types.isArray,\r\n        isFunction = types.isFunction,\r\n        isPlainObject = types.isPlainObject,\r\n        type = types.type;\r\n \r\n     var getAbsoluteUrl = (function() {\r\n        var a;\r\n\r\n        return function(url) {\r\n            if (!a) a = document.createElement('a');\r\n            a.href = url;\r\n\r\n            return a.href;\r\n        };\r\n    })();\r\n   \r\n    var Xhr = (function(){\r\n        var jsonpID = 0,\r\n            key,\r\n            name,\r\n            rscript = /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n            scriptTypeRE = /^(?:text|application)\\/javascript/i,\r\n            xmlTypeRE = /^(?:text|application)\\/xml/i,\r\n            jsonType = 'application/json',\r\n            htmlType = 'text/html',\r\n            blankRE = /^\\s*$/;\r\n\r\n        var XhrDefaultOptions = {\r\n            async: true,\r\n\r\n            // Default type of request\r\n            type: 'GET',\r\n            // Callback that is executed before request\r\n            beforeSend: noop,\r\n            // Callback that is executed if the request succeeds\r\n            success: noop,\r\n            // Callback that is executed the the server drops error\r\n            error: noop,\r\n            // Callback that is executed on request complete (both: error and success)\r\n            complete: noop,\r\n            // The context for the callbacks\r\n            context: null,\r\n            // Whether to trigger \"global\" Ajax events\r\n            global: true,\r\n\r\n            // MIME types mapping\r\n            // IIS returns Javascript as \"application/x-javascript\"\r\n            accepts: {\r\n                script: 'text/javascript, application/javascript, application/x-javascript',\r\n                json: 'application/json',\r\n                xml: 'application/xml, text/xml',\r\n                html: 'text/html',\r\n                text: 'text/plain'\r\n            },\r\n            // Whether the request is to another domain\r\n            crossDomain: false,\r\n            // Default timeout\r\n            timeout: 0,\r\n            // Whether data should be serialized to string\r\n            processData: false,\r\n            // Whether the browser should be allowed to cache GET responses\r\n            cache: true,\r\n\r\n            traditional : false,\r\n            \r\n            xhrFields : {\r\n                withCredentials : false\r\n            }\r\n        };\r\n\r\n        function mimeToDataType(mime) {\r\n            if (mime) {\r\n                mime = mime.split(';', 2)[0];\r\n            }\r\n            if (mime) {\r\n                if (mime == htmlType) {\r\n                    return \"html\";\r\n                } else if (mime == jsonType) {\r\n                    return \"json\";\r\n                } else if (scriptTypeRE.test(mime)) {\r\n                    return \"script\";\r\n                } else if (xmlTypeRE.test(mime)) {\r\n                    return \"xml\";\r\n                }\r\n            }\r\n            return \"text\";\r\n        }\r\n\r\n        function appendQuery(url, query) {\r\n            if (query == '') return url\r\n            return (url + '&' + query).replace(/[&?]{1,2}/, '?')\r\n        }\r\n\r\n        // serialize payload and append it to the URL for GET requests\r\n        function serializeData(options) {\r\n            options.data = options.data || options.query;\r\n            if (options.processData && options.data && type(options.data) != \"string\") {\r\n                options.data = param(options.data, options.traditional);\r\n            }\r\n            if (options.data && (!options.type || options.type.toUpperCase() == 'GET')) {\r\n                if (type(options.data) != \"string\") {\r\n                    options.data = param(options.data, options.traditional);\r\n                }\r\n                options.url = appendQuery(options.url, options.data);\r\n                options.data = undefined;\r\n            }\r\n        }\r\n        \r\n        function serialize(params, obj, traditional, scope) {\r\n            var t, array = isArray(obj),\r\n                hash = isPlainObject(obj)\r\n            each(obj, function(key, value) {\r\n                t =type(value);\r\n                if (scope) key = traditional ? scope :\r\n                    scope + '[' + (hash || t == 'object' || t == 'array' ? key : '') + ']'\r\n                // handle data in serializeArray() format\r\n                if (!scope && array) params.add(value.name, value.value)\r\n                // recurse into nested objects\r\n                else if (t == \"array\" || (!traditional && t == \"object\"))\r\n                    serialize(params, value, traditional, key)\r\n                else params.add(key, value)\r\n            })\r\n        }\r\n\r\n        var param = function(obj, traditional) {\r\n            var params = []\r\n            params.add = function(key, value) {\r\n                if (isFunction(value)) {\r\n                  value = value();\r\n                }\r\n                if (value == null) {\r\n                  value = \"\";\r\n                }\r\n                this.push(encodeURIComponent(key) + '=' + encodeURIComponent(value));\r\n            };\r\n            serialize(params, obj, traditional)\r\n            return params.join('&').replace(/%20/g, '+')\r\n        };\r\n\r\n        var Xhr = Evented.inherit({\r\n            klassName : \"Xhr\",\r\n\r\n            _request  : function(args) {\r\n                var _ = this._,\r\n                    self = this,\r\n                    options = mixin({},XhrDefaultOptions,_.options,args),\r\n                    xhr = _.xhr = new XMLHttpRequest();\r\n\r\n                serializeData(options)\r\n\r\n                if (options.beforeSend) {\r\n                    options.beforeSend.call(this, xhr, options);\r\n                }                \r\n\r\n                var dataType = options.dataType || options.handleAs,\r\n                    mime = options.mimeType || options.accepts[dataType],\r\n                    headers = options.headers,\r\n                    xhrFields = options.xhrFields,\r\n                    isFormData = options.data && options.data instanceof FormData,\r\n                    basicAuthorizationToken = options.basicAuthorizationToken,\r\n                    type = options.type,\r\n                    url = options.url,\r\n                    async = options.async,\r\n                    user = options.user , \r\n                    password = options.password,\r\n                    deferred = new Deferred(),\r\n                    contentType = options.contentType || (isFormData ? false : 'application/x-www-form-urlencoded');\r\n\r\n                if (xhrFields) {\r\n                    for (name in xhrFields) {\r\n                        xhr[name] = xhrFields[name];\r\n                    }\r\n                }\r\n\r\n                if (mime && mime.indexOf(',') > -1) {\r\n                    mime = mime.split(',', 2)[0];\r\n                }\r\n                if (mime && xhr.overrideMimeType) {\r\n                    xhr.overrideMimeType(mime);\r\n                }\r\n\r\n                //if (dataType) {\r\n                //    xhr.responseType = dataType;\r\n                //}\r\n\r\n                var finish = function() {\r\n                    xhr.onloadend = noop;\r\n                    xhr.onabort = noop;\r\n                    xhr.onprogress = noop;\r\n                    xhr.ontimeout = noop;\r\n                    xhr = null;\r\n                }\r\n                var onloadend = function() {\r\n                    var result, error = false\r\n                    if ((xhr.status >= 200 && xhr.status < 300) || xhr.status == 304 || (xhr.status == 0 && getAbsoluteUrl(url).startsWith('file:'))) {\r\n                        dataType = dataType || mimeToDataType(options.mimeType || xhr.getResponseHeader('content-type'));\r\n\r\n                        result = xhr.responseText;\r\n                        try {\r\n                            if (dataType == 'script') {\r\n                                eval(result);\r\n                            } else if (dataType == 'xml') {\r\n                                result = xhr.responseXML;\r\n                            } else if (dataType == 'json') {\r\n                                result = blankRE.test(result) ? null : JSON.parse(result);\r\n                            } else if (dataType == \"blob\") {\r\n                                result = Blob([xhr.response]);\r\n                            } else if (dataType == \"arraybuffer\") {\r\n                                result = xhr.reponse;\r\n                            }\r\n                        } catch (e) { \r\n                            error = e;\r\n                        }\r\n\r\n                        if (error) {\r\n                            deferred.reject(error,xhr.status,xhr);\r\n                        } else {\r\n                            deferred.resolve(result,xhr.status,xhr);\r\n                        }\r\n                    } else {\r\n                        deferred.reject(new Error(xhr.statusText),xhr.status,xhr);\r\n                    }\r\n                    finish();\r\n                };\r\n\r\n                var onabort = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"abort\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n \r\n                var ontimeout = function() {\r\n                    if (deferred) {\r\n                        deferred.reject(new Error(\"timeout\"),xhr.status,xhr);\r\n                    }\r\n                    finish();                 \r\n                }\r\n\r\n                var onprogress = function(evt) {\r\n                    if (deferred) {\r\n                        deferred.notify(evt,xhr.status,xhr);\r\n                    }\r\n                }\r\n\r\n                xhr.onloadend = onloadend;\r\n                xhr.onabort = onabort;\r\n                xhr.ontimeout = ontimeout;\r\n                xhr.onprogress = onprogress;\r\n\r\n                xhr.open(type, url, async, user, password);\r\n               \r\n                if (headers) {\r\n                    for ( var key in headers) {\r\n                        var value = headers[key];\r\n \r\n                        if(key.toLowerCase() === 'content-type'){\r\n                            contentType = value;\r\n                        } else {\r\n                           xhr.setRequestHeader(key, value);\r\n                        }\r\n                    }\r\n                }   \r\n\r\n                if  (contentType && contentType !== false){\r\n                    xhr.setRequestHeader('Content-Type', contentType);\r\n                }\r\n\r\n                if(!headers || !('X-Requested-With' in headers)){\r\n                    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\r\n                }\r\n\r\n\r\n                //If basicAuthorizationToken is defined set its value into \"Authorization\" header\r\n                if (basicAuthorizationToken) {\r\n                    xhr.setRequestHeader(\"Authorization\", basicAuthorizationToken);\r\n                }\r\n\r\n                xhr.send(options.data ? options.data : null);\r\n\r\n                return deferred.promise;\r\n\r\n            },\r\n\r\n            \"abort\": function() {\r\n                var _ = this._,\r\n                    xhr = _.xhr;\r\n\r\n                if (xhr) {\r\n                    xhr.abort();\r\n                }    \r\n            },\r\n\r\n\r\n            \"request\": function(args) {\r\n                return this._request(args);\r\n            },\r\n\r\n            get : function(args) {\r\n                args = args || {};\r\n                args.type = \"GET\";\r\n                return this._request(args);\r\n            },\r\n\r\n            post : function(args) {\r\n                args = args || {};\r\n                args.type = \"POST\";\r\n                return this._request(args);\r\n            },\r\n\r\n            patch : function(args) {\r\n                args = args || {};\r\n                args.type = \"PATCH\";\r\n                return this._request(args);\r\n            },\r\n\r\n            put : function(args) {\r\n                args = args || {};\r\n                args.type = \"PUT\";\r\n                return this._request(args);\r\n            },\r\n\r\n            del : function(args) {\r\n                args = args || {};\r\n                args.type = \"DELETE\";\r\n                return this._request(args);\r\n            },\r\n\r\n            \"init\": function(options) {\r\n                this._ = {\r\n                    options : options || {}\r\n                };\r\n            }\r\n        });\r\n\r\n        [\"request\",\"get\",\"post\",\"put\",\"del\",\"patch\"].forEach(function(name){\r\n            Xhr[name] = function(url,args) {\r\n                var xhr = new Xhr({\"url\" : url});\r\n                return xhr[name](args);\r\n            };\r\n        });\r\n\r\n        Xhr.defaultOptions = XhrDefaultOptions;\r\n        Xhr.param = param;\r\n\r\n        return Xhr;\r\n    })();\r\n\r\n\treturn http.Xhr = Xhr;\t\r\n});\ndefine('skylark-net-http/Restful',[\r\n    \"skylark-langx-objects\",\r\n    \"skylark-langx-strings\",\r\n    \"skylark-langx-emitter/Evented\",    \r\n    \"./Xhr\"\r\n],function(objects,strings,Evented,Xhr){\r\n    var mixin = objects.mixin,\r\n        substitute = strings.substitute;\r\n\r\n    var Restful = Evented.inherit({\r\n        \"klassName\" : \"Restful\",\r\n\r\n        \"idAttribute\": \"id\",\r\n        \r\n        getBaseUrl : function(args) {\r\n            //$$baseEndpoint : \"/files/${fileId}/comments\",\r\n            var baseEndpoint = substitute(this.baseEndpoint,args),\r\n                baseUrl = this.server + this.basePath + baseEndpoint;\r\n            if (args[this.idAttribute]!==undefined) {\r\n                baseUrl = baseUrl + \"/\" + args[this.idAttribute]; \r\n            }\r\n            return baseUrl;\r\n        },\r\n        _head : function(args) {\r\n            //get resource metadata .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n        },\r\n        _get : function(args) {\r\n            //get resource ,one or list .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, null if list\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            return Xhr.get(this.getBaseUrl(args),args);\r\n        },\r\n        _post  : function(args,verb) {\r\n            //create or move resource .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"data\" : body // the own data,required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            //verb : the verb ,ex: copy,touch,trash,untrash,watch\r\n            var url = this.getBaseUrl(args);\r\n            if (verb) {\r\n                url = url + \"/\" + verb;\r\n            }\r\n            return Xhr.post(url, args);\r\n        },\r\n\r\n        _put  : function(args,verb) {\r\n            //update resource .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"data\" : body // the own data,required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            //verb : the verb ,ex: copy,touch,trash,untrash,watch\r\n            var url = this.getBaseUrl(args);\r\n            if (verb) {\r\n                url = url + \"/\" + verb;\r\n            }\r\n            return Xhr.put(url, args);\r\n        },\r\n\r\n        _delete : function(args) {\r\n            //delete resource . \r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}         \r\n\r\n            // HTTP request : DELETE http://center.utilhub.com/registry/v1/apps/{appid}\r\n            var url = this.getBaseUrl(args);\r\n            return Xhr.del(url);\r\n        },\r\n\r\n        _patch : function(args){\r\n            //update resource metadata. \r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"data\" : body // the own data,required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            var url = this.getBaseUrl(args);\r\n            return Xhr.patch(url, args);\r\n        },\r\n        query: function(params) {\r\n            \r\n            return this._post(params);\r\n        },\r\n\r\n        retrieve: function(params) {\r\n            return this._get(params);\r\n        },\r\n\r\n        create: function(params) {\r\n            return this._post(params);\r\n        },\r\n\r\n        update: function(params) {\r\n            return this._put(params);\r\n        },\r\n\r\n        delete: function(params) {\r\n            // HTTP request : DELETE http://center.utilhub.com/registry/v1/apps/{appid}\r\n            return this._delete(params);\r\n        },\r\n\r\n        patch: function(params) {\r\n           // HTTP request : PATCH http://center.utilhub.com/registry/v1/apps/{appid}\r\n            return this._patch(params);\r\n        },\r\n        init: function(params) {\r\n            mixin(this,params);\r\n //           this._xhr = XHRx();\r\n       }\r\n    });\r\n\r\n    return Restful;\r\n});\ndefine('skylark-net-http/Upload',[\r\n    \"skylark-langx-types\",\r\n    \"skylark-langx-objects\",\r\n    \"skylark-langx-arrays\",\r\n    \"skylark-langx-async/Deferred\",\r\n    \"skylark-langx-emitter/Evented\",    \r\n    \"./Xhr\",\r\n    \"./http\"\r\n],function(types, objects, arrays, Deferred, Evented,Xhr, http){\r\n\r\n    var blobSlice = Blob.prototype.slice || Blob.prototype.webkitSlice || Blob.prototype.mozSlice;\r\n\r\n\r\n    /*\r\n     *Class for uploading files using xhr.\r\n     */\r\n    var Upload = Evented.inherit({\r\n        klassName : \"Upload\",\r\n\r\n        _construct : function(options) {\r\n            this._options = objects.mixin({\r\n                debug: false,\r\n                url: '/upload',\r\n                headers : {\r\n\r\n                },\r\n                // maximum number of concurrent uploads\r\n                maxConnections: 999,\r\n                // To upload large files in smaller chunks, set the following option\r\n                // to a preferred maximum chunk size. If set to 0, null or undefined,\r\n                // or the browser does not support the required Blob API, files will\r\n                // be uploaded as a whole.\r\n                maxChunkSize: undefined,\r\n\r\n                onProgress: function(id, fileName, loaded, total){\r\n                },\r\n                onComplete: function(id, fileName,result,status,xhr){\r\n                },\r\n                onCancel: function(id, fileName){\r\n                },\r\n                onFailure : function(id,fileName,e) {                    \r\n                }\r\n            },options);\r\n\r\n            this._queue = [];\r\n            // params for files in queue\r\n            this._params = [];\r\n\r\n            this._files = [];\r\n            this._xhrs = [];\r\n\r\n            // current loaded size in bytes for each file\r\n            this._loaded = [];\r\n\r\n        },\r\n\r\n        /**\r\n         * Adds file to the queue\r\n         * Returns id to use with upload, cancel\r\n         **/\r\n        add: function(file){\r\n            return this._files.push(file) - 1;\r\n        },\r\n\r\n        /**\r\n         * Sends the file identified by id and additional query params to the server.\r\n         */\r\n        send: function(id, params){\r\n            if (!this._files[id]) {\r\n                // Already sended or canceled\r\n                return ;\r\n            }\r\n            if (this._queue.indexOf(id)>-1) {\r\n                // Already in the queue\r\n                return;\r\n            }\r\n            var len = this._queue.push(id);\r\n\r\n            var copy = objects.clone(params);\r\n\r\n            this._params[id] = copy;\r\n\r\n            // if too many active uploads, wait...\r\n            if (len <= this._options.maxConnections){\r\n                this._send(id, this._params[id]);\r\n            }     \r\n        },\r\n\r\n        /**\r\n         * Sends all files  and additional query params to the server.\r\n         */\r\n        sendAll: function(params){\r\n           for( var id = 0; id <this._files.length; id++) {\r\n                this.send(id,params);\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Cancels file upload by id\r\n         */\r\n        cancel: function(id){\r\n            this._cancel(id);\r\n            this._dequeue(id);\r\n        },\r\n\r\n        /**\r\n         * Cancells all uploads\r\n         */\r\n        cancelAll: function(){\r\n            for (var i=0; i<this._queue.length; i++){\r\n                this._cancel(this._queue[i]);\r\n            }\r\n            this._queue = [];\r\n        },\r\n\r\n        getName: function(id){\r\n            var file = this._files[id];\r\n            return file.fileName != null ? file.fileName : file.name;\r\n        },\r\n\r\n        getSize: function(id){\r\n            var file = this._files[id];\r\n            return file.fileSize != null ? file.fileSize : file.size;\r\n        },\r\n\r\n        /**\r\n         * Returns uploaded bytes for file identified by id\r\n         */\r\n        getLoaded: function(id){\r\n            return this._loaded[id] || 0;\r\n        },\r\n\r\n\r\n        /**\r\n         * Sends the file identified by id and additional query params to the server\r\n         * @param {Object} params name-value string pairs\r\n         */\r\n        _send: function(id, params){\r\n            var options = this._options,\r\n                name = this.getName(id),\r\n                size = this.getSize(id),\r\n                chunkSize = options.maxChunkSize || 0,\r\n                curUploadingSize,\r\n                curLoadedSize = 0,\r\n                file = this._files[id],\r\n                args = {\r\n                    headers : objects.clone(options.headers)                    \r\n                };\r\n\r\n            this._loaded[id] = this._loaded[id] || 0;\r\n\r\n            var xhr = this._xhrs[id] = new Xhr({\r\n                url : options.url\r\n            });\r\n\r\n            if (chunkSize)  {\r\n\r\n                args.data = blobSlice.call(\r\n                    file,\r\n                    this._loaded[id],\r\n                    this._loaded[id] + chunkSize,\r\n                    file.type\r\n                );\r\n                // Store the current chunk size, as the blob itself\r\n                // will be dereferenced after data processing:\r\n                curUploadingSize = args.data.size;\r\n                // Expose the chunk bytes position range:\r\n                args.headers[\"content-range\"] = 'bytes ' + this._loaded[id] + '-' +\r\n                    (this._loaded[id] + curUploadingSize - 1) + '/' + size;\r\n                args.headers[\"Content-Type\"] = \"application/octet-stream\";\r\n            }  else {\r\n                curUploadingSize = size;\r\n                var formParamName =  params.formParamName,\r\n                    formData = params.formData;\r\n\r\n                if (formParamName) {\r\n                    if (!formData) {\r\n                        formData = new FormData();\r\n                    }\r\n                    formData.append(formParamName,file);\r\n                    args.data = formData;\r\n    \r\n                } else {\r\n                    args.headers[\"Content-Type\"] = file.type || \"application/octet-stream\";\r\n                    args.data = file;\r\n                }\r\n            }\r\n\r\n\r\n            var self = this;\r\n            xhr.post(\r\n                args\r\n            ).progress(function(e){\r\n                if (e.lengthComputable){\r\n                    curLoadedSize = curLoadedSize + e.loaded;\r\n                    self._loaded[id] = self._loaded[id] + e.loaded;\r\n                    self._options.onProgress(id, name, self._loaded[id], size);\r\n                }\r\n            }).then(function(result,status,xhr){\r\n                if (!self._files[id]) {\r\n                    // the request was aborted/cancelled\r\n                    return;\r\n                }\r\n\r\n                if (curLoadedSize < curUploadingSize) {\r\n                    // Create a progress event if no final progress event\r\n                    // with loaded equaling total has been triggered\r\n                    // for this chunk:\r\n                    self._loaded[id] = self._loaded[id] + curUploadingSize - curLoadedSize;\r\n                    self._options.onProgress(id, name, self._loaded[id], size);                    \r\n                }\r\n\r\n                if (self._loaded[id] <size) {\r\n                    // File upload not yet complete,\r\n                    // continue with the next chunk:\r\n                    self._send(id,params);\r\n                } else {\r\n                    self._options.onComplete(id,name,result,status,xhr);\r\n\r\n                    self._files[id] = null;\r\n                    self._xhrs[id] = null;\r\n                    self._dequeue(id);\r\n                }\r\n\r\n\r\n            }).catch(function(e){\r\n                self._options.onFailure(id,name,e);\r\n\r\n                self._files[id] = null;\r\n                self._xhrs[id] = null;\r\n                self._dequeue(id);\r\n            });\r\n        },\r\n\r\n        _cancel: function(id){\r\n            this._options.onCancel(id, this.getName(id));\r\n\r\n            this._files[id] = null;\r\n\r\n            if (this._xhrs[id]){\r\n                this._xhrs[id].abort();\r\n                this._xhrs[id] = null;\r\n            }\r\n        },\r\n\r\n        /**\r\n         * Returns id of files being uploaded or\r\n         * waiting for their turn\r\n         */\r\n        getQueue: function(){\r\n            return this._queue;\r\n        },\r\n\r\n\r\n        /**\r\n         * Removes element from queue, starts upload of next\r\n         */\r\n        _dequeue: function(id){\r\n            var i = arrays.inArray(id,this._queue);\r\n            this._queue.splice(i, 1);\r\n\r\n            var max = this._options.maxConnections;\r\n\r\n            if (this._queue.length >= max && i < max){\r\n                var nextId = this._queue[max-1];\r\n                this._send(nextId, this._params[nextId]);\r\n            }\r\n        }\r\n    });\r\n\r\n\r\n  Upload.send = function(file, options) {\r\n    var uploader = new Upload(options);\r\n    var id = uploader.add(file);\r\n    return uploader.send(id,options);\r\n  };\r\n\r\n  Upload.sendAll = function(files,options) {\r\n      var uploader = new Upload(options);\r\n      for (var i = 0, len = files.length; i < len; i++) {\r\n        this.add(file[i]);\r\n      }\r\n      return uploader.send(options);\r\n  };\r\n\r\n    return http.Upload = Upload;    \r\n});\ndefine('skylark-net-http/main',[\r\n\t\"./http\",\r\n\t\"./Restful\",\r\n\t\"./Xhr\",\r\n\t\"./Upload\"\r\n],function(http){\r\n\treturn http;\r\n});\ndefine('skylark-net-http', ['skylark-net-http/main'], function (main) { return main; });\n\n"]}